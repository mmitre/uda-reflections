-- What happens when you initialize a repository? Why do you need to do it?
It creates the metadata for the new repository. Otherwise, git wouldn't know how to accept commits or track files.

-- How is the staging area different from the working directory and the repository? What value do you think it offer?
It allows us to group all files that were updated as part of one logical change so that they can be committed together.

-- How can you use the staging area to make sure you have one commit per logical change?
Even if you have changed other files, you can stage only those that make a specific logical change.

-- What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When creating new features or making changes that could destabilize the program. Also, when collaborating with other developers, so any changes won't break what they're doing.

-- How do the diagrams help you visualize the branch structure?
It shows the different branches and how they relate to each other, as well as any commits that might be lost.

-- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The changes made in both branches are applied. We represent this as the latest commit in master having two parents (the last commit from each branch being merged).

-- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Merging all changes manually would get tedious very soon, and it's not necessary if changes are made to different sections in the file. That allows the developer to focus only on making sure that conflicts are dealt with appropriately